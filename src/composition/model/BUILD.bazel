load("@rules_python//python:defs.bzl", "py_library", "py_test")

# py_library(
#     name = "bar_cached_cross_attention",
#     srcs = ["bar_cached_cross_attention.py"],
#     visibility = ["//visibility:public"],
#     deps = ["@pypi//torch"],
# )

py_library(
    name = "control_enconder",
    srcs = ["control_encoder.py"],
    visibility = ["//visibility:public"],
    deps = ["@pypi//torch"],
)

py_library(
    name = "instrument_count_head",
    srcs = ["instrument_count_head.py"],
    visibility = ["//visibility:public"],
    deps = ["@pypi//torch"],
)

py_library(
    name = "latent_interpolator",
    srcs = ["latent_interpolator.py"],
    visibility = ["//visibility:public"],
    deps = ["@pypi//torch"],
)

py_library(
    name = "latent_net",
    srcs = ["latent_net.py"],
    visibility = ["//visibility:public"],
    deps = ["@pypi//torch"],
)

py_library(
    name = "utils",
    srcs = ["utils.py"],
    visibility = ["//visibility:public"],
    deps = ["@pypi//torch"],
)

py_library(
    name = "time_aware_embedding",
    srcs = ["time_aware_embedding.py"],
    visibility = ["//visibility:public"],
    deps = ["@pypi//torch"],
)

py_library(
    name = "conductor_model",
    srcs = ["conductor_model.py"],
    visibility = ["//visibility:public"],
    deps = [
        ":control_enconder",
        ":instrument_count_head",
        ":latent_interpolator",
        ":latent_net",
        ":time_aware_embedding",
        ":utils",
        "@pypi//numpy",
        "@pypi//torch",
    ],
)

py_library(
    name = "input_embeddings",
    srcs = ["input_embeddings.py"],
    visibility = ["//visibility:public"],
    deps = [
        "//src/composition/midi:tokenizer",
        "@pypi//torch",
    ],
)

py_test(
    name = "input_embeddings_test",
    timeout = "short",
    srcs = ["tests/input_embeddings_test.py"],
    data = [
        "//third_party/pytorch_cuda_libs:cuda_so_files",
    ],
    env = {
        "LD_LIBRARY_PATH": "third_party/pytorch_cuda_libs/lib",
    },
    deps = [
        ":input_embeddings",
        "//src/composition/midi:tokenizer",
        "@pypi//pytest",
        "@pypi//torch",
    ],
)

py_test(
    name = "control_encoder_test",
    timeout = "short",
    srcs = ["tests/control_encoder_test.py"],
    data = [
        "//third_party/pytorch_cuda_libs:cuda_so_files",
    ],
    env = {
        "LD_LIBRARY_PATH": "third_party/pytorch_cuda_libs/lib",
    },
    deps = [
        ":control_enconder",
        "@pypi//pytest",
        "@pypi//torch",
    ],
)

py_test(
    name = "time_aware_embedding_test",
    timeout = "short",
    srcs = ["tests/time_aware_embedding_test.py"],
    data = [
        "//third_party/pytorch_cuda_libs:cuda_so_files",
    ],
    env = {
        "LD_LIBRARY_PATH": "third_party/pytorch_cuda_libs/lib",
    },
    deps = [
        ":time_aware_embedding",
        "@pypi//pytest",
        "@pypi//torch",
    ],
)

py_test(
    name = "conductor_model_test",
    timeout = "short",
    srcs = ["tests/conductor_model_test.py"],
    data = [
        "//third_party/pytorch_cuda_libs:cuda_so_files",
    ],
    env = {
        "LD_LIBRARY_PATH": "third_party/pytorch_cuda_libs/lib",
    },
    deps = [
        ":conductor_model",
        ":control_enconder",
        ":instrument_count_head",
        ":latent_net",
        ":time_aware_embedding",
        ":utils",
        "@pypi//pytest",
        "@pypi//torch",
    ],
)

py_test(
    name = "latent_interpolator_test",
    timeout = "short",
    srcs = ["tests/latent_interpolator_test.py"],
    data = [
        "//third_party/pytorch_cuda_libs:cuda_so_files",
    ],
    env = {
        "LD_LIBRARY_PATH": "third_party/pytorch_cuda_libs/lib",
    },
    deps = [
        ":latent_interpolator",
        "@pypi//pytest",
        "@pypi//torch",
    ],
)

# py_library(
#     name = "model",
#     srcs = ["model.py"],
#     visibility = ["//visibility:public"],
#     deps = [
#         ":bar_cached_cross_attention",
#         ":control_econder",
#         ":instrument_count_head",
#         ":latent_interpolator",
#         ":latent_net",
#         ":utils",
#         "//src/composition/midi:tokenizer",
#         # use mamba like in the tokenizer test
#     ],
# )
